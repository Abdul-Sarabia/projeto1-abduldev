Comandos
'git start' cria um repositório

'git add' adiciona o arquivo ao repositório

'git add .' adiciona todos arquivos ao repositório

'git status' verifica arquivos no repositório

'git commit -m' "commit inicial"
-m significa mensagem
para adicionar email e usuário do git

'git config --global user.name "nome de usuário" ' 

 also       --global user.email "email de usuário" '
para definir arquivos ao repositório na nuvem

'git remote add origin" https://github.com/Abdul-Sarabia/projeto1-abduldev'

'git push' para enviar para nuvem

'git reflog' histórico de alterações

'git reset --hard "código de versão do código que deseja" 
para navegar nas versões diponíveis do código.

'git branch' exibe quantos BRANCH'S o projeto possui

BRANCH literalmente como nome diz "ramos" para ramificar o projeto
exemplo um projeto que já esteja em funcionamento mas precise de continuo desenvolvimento
porém é necessário um BRANCH extra para que isso seja feito sem que o projeto pare
e só quando a branch em desenvolvimento estiver em funcionamento é feito o "MERGE"

1 mastert
2 staging
'git checkout' "staging" alterar para a BRANCH 2

'git pull' traz atualizações do servidor para máquina local
recomendado para ser feito antes de subir um "merge"

'git merge' mistura os projetos

passo a passo seguro de como usar BRANCH
1. git pull branch principal
2. gerar uma nova branch a partir da branch principal
3. trabalhar e adicionar novas funcionalidades na nova branch que cirou
4. finalizar o trabalho na branch temporária
5. git checkout na branch principal
6. git pull
7. mergiar(unir) no código da branch temporário com a branch principal(depois que testar)
8. git push da branch principal 

usando na prática

git checkout -b sistema-de-login master
criei outro txt com nome "sistema de login"

git add . para adicionar o arquivo ao novo branch

git status para ver a alteração no branch selecionado

git commit -m "criado sistema de login" para executar alteração

se já tiver testado o código e estiver certo de que o código funciona

git checkout master para ir para a branch principal

git pull para não utilizar código antigo e sempre manter atualizado

git merge sistema-de-login para mergiar todo o role atualizado e rodando

git push pra subir pras nuvens tudo isso
NOTA!!! Processo recomendado apenas para trabalho em equipe onde é necessário
e alguns projetos é necessário o uso de pull request onde um programador verifica seu código

 


